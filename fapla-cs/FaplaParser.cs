//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/amin/Documents/Fapla/fapla-antlr/Fapla.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class FaplaParser : Parser {
	public const int
		Literal=1, STRING=2, REAL=3, BOOL=4, ELSE=5, THEN=6, IF=7, RETURN=8, WHILE=9, 
		MODULE=10, BEGIN=11, END=12, MAIN=13, INPUT=14, OUTPUT=15, WRITE=16, READ=17, 
		SEMI=18, COMMA=19, DOT=20, ASSIGN=21, GT=22, LT=23, FACTORIAL=24, QUESTION=25, 
		COLON=26, EQUAL=27, LE=28, GE=29, NOTEQUAL=30, AND=31, OR=32, NOT=33, 
		XOR=34, ADD=35, SUB=36, MUL=37, DIV=38, POW=39, MOD=40, PO=41, PC=42, 
		Identifier=43, WS=44, COMMENT=45, LINE_COMMENT=46;
	public const int
		RULE_startState = 0, RULE_moduleDeclaration = 1, RULE_mainModuleDeclaration = 2, 
		RULE_moduleInput = 3, RULE_moduleOutput = 4, RULE_block = 5, RULE_statement = 6, 
		RULE_expression = 7, RULE_expressionList = 8, RULE_primitiveType = 9, 
		RULE_varDeclaration = 10, RULE_assignment = 11;
	public static readonly string[] ruleNames = {
		"startState", "moduleDeclaration", "mainModuleDeclaration", "moduleInput", 
		"moduleOutput", "block", "statement", "expression", "expressionList", 
		"primitiveType", "varDeclaration", "assignment"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "';'", "','", "'.'", "'='", "'>'", 
		"'<'", "'!'", "'?'", "':'", "'=='", "'<='", "'>='", "'<>'", null, null, 
		null, null, "'+'", "'-'", "'*'", "'/'", "'^'", "'%'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Literal", "STRING", "REAL", "BOOL", "ELSE", "THEN", "IF", "RETURN", 
		"WHILE", "MODULE", "BEGIN", "END", "MAIN", "INPUT", "OUTPUT", "WRITE", 
		"READ", "SEMI", "COMMA", "DOT", "ASSIGN", "GT", "LT", "FACTORIAL", "QUESTION", 
		"COLON", "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", "NOT", "XOR", "ADD", 
		"SUB", "MUL", "DIV", "POW", "MOD", "PO", "PC", "Identifier", "WS", "COMMENT", 
		"LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Fapla.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public FaplaParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartStateContext : ParserRuleContext {
		public MainModuleDeclarationContext mainModuleDeclaration() {
			return GetRuleContext<MainModuleDeclarationContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(FaplaParser.Eof, 0); }
		public ModuleDeclarationContext[] moduleDeclaration() {
			return GetRuleContexts<ModuleDeclarationContext>();
		}
		public ModuleDeclarationContext moduleDeclaration(int i) {
			return GetRuleContext<ModuleDeclarationContext>(i);
		}
		public StartStateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startState; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.EnterStartState(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.ExitStartState(this);
		}
	}

	[RuleVersion(0)]
	public StartStateContext startState() {
		StartStateContext _localctx = new StartStateContext(Context, State);
		EnterRule(_localctx, 0, RULE_startState);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 24; moduleDeclaration();
					}
					} 
				}
				State = 29;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 30; mainModuleDeclaration();
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==MODULE) {
				{
				{
				State = 31; moduleDeclaration();
				}
				}
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 37; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationContext : ParserRuleContext {
		public ITerminalNode MODULE() { return GetToken(FaplaParser.MODULE, 0); }
		public ITerminalNode[] Identifier() { return GetTokens(FaplaParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(FaplaParser.Identifier, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode INPUT() { return GetToken(FaplaParser.INPUT, 0); }
		public ITerminalNode[] COLON() { return GetTokens(FaplaParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(FaplaParser.COLON, i);
		}
		public ITerminalNode OUTPUT() { return GetToken(FaplaParser.OUTPUT, 0); }
		public ITerminalNode[] SEMI() { return GetTokens(FaplaParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(FaplaParser.SEMI, i);
		}
		public PrimitiveTypeContext[] primitiveType() {
			return GetRuleContexts<PrimitiveTypeContext>();
		}
		public PrimitiveTypeContext primitiveType(int i) {
			return GetRuleContext<PrimitiveTypeContext>(i);
		}
		public ModuleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.EnterModuleDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.ExitModuleDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationContext moduleDeclaration() {
		ModuleDeclarationContext _localctx = new ModuleDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_moduleDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39; Match(MODULE);
			State = 40; Match(Identifier);
			State = 53;
			_la = TokenStream.La(1);
			if (_la==INPUT) {
				{
				State = 41; Match(INPUT);
				State = 42; Match(COLON);
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Identifier) {
					{
					{
					State = 43; Match(Identifier);
					State = 44; Match(COLON);
					State = 45; primitiveType();
					State = 46; Match(SEMI);
					}
					}
					State = 52;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 60;
			_la = TokenStream.La(1);
			if (_la==OUTPUT) {
				{
				State = 55; Match(OUTPUT);
				State = 56; Match(COLON);
				{
				State = 57; primitiveType();
				}
				State = 58; Match(SEMI);
				}
			}

			{
			State = 62; block();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainModuleDeclarationContext : ParserRuleContext {
		public ITerminalNode MODULE() { return GetToken(FaplaParser.MODULE, 0); }
		public ITerminalNode MAIN() { return GetToken(FaplaParser.MAIN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MainModuleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainModuleDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.EnterMainModuleDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.ExitMainModuleDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MainModuleDeclarationContext mainModuleDeclaration() {
		MainModuleDeclarationContext _localctx = new MainModuleDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_mainModuleDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; Match(MODULE);
			State = 65; Match(MAIN);
			{
			State = 66; block();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleInputContext : ParserRuleContext {
		public ITerminalNode INPUT() { return GetToken(FaplaParser.INPUT, 0); }
		public ITerminalNode COLON() { return GetToken(FaplaParser.COLON, 0); }
		public VarDeclarationContext[] varDeclaration() {
			return GetRuleContexts<VarDeclarationContext>();
		}
		public VarDeclarationContext varDeclaration(int i) {
			return GetRuleContext<VarDeclarationContext>(i);
		}
		public ModuleInputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleInput; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.EnterModuleInput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.ExitModuleInput(this);
		}
	}

	[RuleVersion(0)]
	public ModuleInputContext moduleInput() {
		ModuleInputContext _localctx = new ModuleInputContext(Context, State);
		EnterRule(_localctx, 6, RULE_moduleInput);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(INPUT);
			State = 69; Match(COLON);
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Identifier) {
				{
				{
				State = 70; varDeclaration();
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOutputContext : ParserRuleContext {
		public ITerminalNode OUTPUT() { return GetToken(FaplaParser.OUTPUT, 0); }
		public ITerminalNode COLON() { return GetToken(FaplaParser.COLON, 0); }
		public ITerminalNode SEMI() { return GetToken(FaplaParser.SEMI, 0); }
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ModuleOutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOutput; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.EnterModuleOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.ExitModuleOutput(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOutputContext moduleOutput() {
		ModuleOutputContext _localctx = new ModuleOutputContext(Context, State);
		EnterRule(_localctx, 8, RULE_moduleOutput);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(OUTPUT);
			State = 77; Match(COLON);
			{
			State = 78; primitiveType();
			}
			State = 79; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(FaplaParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(FaplaParser.END, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(BEGIN);
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Literal) | (1L << IF) | (1L << RETURN) | (1L << WHILE) | (1L << BEGIN) | (1L << WRITE) | (1L << READ) | (1L << SEMI) | (1L << NOT) | (1L << Identifier))) != 0)) {
				{
				{
				State = 82; statement();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 88; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(FaplaParser.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(FaplaParser.THEN, 0); }
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(FaplaParser.ELSE, 0); }
		public ITerminalNode WHILE() { return GetToken(FaplaParser.WHILE, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(FaplaParser.SEMI, 0); }
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		public ITerminalNode WRITE() { return GetToken(FaplaParser.WRITE, 0); }
		public ITerminalNode PO() { return GetToken(FaplaParser.PO, 0); }
		public ITerminalNode PC() { return GetToken(FaplaParser.PC, 0); }
		public ITerminalNode READ() { return GetToken(FaplaParser.READ, 0); }
		public ITerminalNode Identifier() { return GetToken(FaplaParser.Identifier, 0); }
		public ITerminalNode RETURN() { return GetToken(FaplaParser.RETURN, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		int _la;
		try {
			State = 121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90; Match(IF);
				State = 91; expression(0);
				State = 92; Match(THEN);
				State = 93; block();
				State = 96;
				_la = TokenStream.La(1);
				if (_la==ELSE) {
					{
					State = 94; Match(ELSE);
					State = 95; block();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 98; Match(WHILE);
				State = 99; expression(0);
				State = 100; statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 102; Match(SEMI);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 103; expression(0);
				State = 104; Match(SEMI);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 106; assignment();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 107; varDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 108; Match(WRITE);
				State = 109; Match(PO);
				State = 110; expression(0);
				State = 111; Match(PC);
				State = 112; Match(SEMI);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 114; Match(READ);
				State = 115; Match(Identifier);
				State = 116; Match(SEMI);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 117; Match(RETURN);
				State = 118; expression(0);
				State = 119; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(FaplaParser.NOT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Identifier() { return GetToken(FaplaParser.Identifier, 0); }
		public ITerminalNode PO() { return GetToken(FaplaParser.PO, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode PC() { return GetToken(FaplaParser.PC, 0); }
		public ITerminalNode Literal() { return GetToken(FaplaParser.Literal, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode MUL() { return GetToken(FaplaParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(FaplaParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(FaplaParser.MOD, 0); }
		public ITerminalNode ADD() { return GetToken(FaplaParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(FaplaParser.SUB, 0); }
		public ITerminalNode LE() { return GetToken(FaplaParser.LE, 0); }
		public ITerminalNode GE() { return GetToken(FaplaParser.GE, 0); }
		public ITerminalNode GT() { return GetToken(FaplaParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(FaplaParser.LT, 0); }
		public ITerminalNode EQUAL() { return GetToken(FaplaParser.EQUAL, 0); }
		public ITerminalNode NOTEQUAL() { return GetToken(FaplaParser.NOTEQUAL, 0); }
		public ITerminalNode AND() { return GetToken(FaplaParser.AND, 0); }
		public ITerminalNode POW() { return GetToken(FaplaParser.POW, 0); }
		public ITerminalNode XOR() { return GetToken(FaplaParser.XOR, 0); }
		public ITerminalNode OR() { return GetToken(FaplaParser.OR, 0); }
		public ITerminalNode QUESTION() { return GetToken(FaplaParser.QUESTION, 0); }
		public ITerminalNode COLON() { return GetToken(FaplaParser.COLON, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 124; Match(NOT);
				State = 125; expression(14);
				}
				break;
			case 2:
				{
				State = 126; Match(Identifier);
				State = 127; Match(PO);
				State = 128; expressionList();
				State = 129; Match(PC);
				}
				break;
			case 3:
				{
				State = 131; Match(Literal);
				}
				break;
			case 4:
				{
				State = 132; Match(Identifier);
				}
				break;
			case 5:
				{
				State = 133; block();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 168;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 166;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 136;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 137;
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 138; expression(14);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 139;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 140;
						_la = TokenStream.La(1);
						if ( !(_la==ADD || _la==SUB) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 141; expression(13);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 142;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 143;
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << LE) | (1L << GE))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 144; expression(12);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 145;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 146;
						_la = TokenStream.La(1);
						if ( !(_la==EQUAL || _la==NOTEQUAL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 147; expression(11);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 148;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 149; Match(AND);
						State = 150; expression(10);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 151;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 152; Match(POW);
						State = 153; expression(9);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 154;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 155; Match(XOR);
						State = 156; expression(8);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 157;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 158; Match(OR);
						State = 159; expression(7);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 160;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 161; Match(QUESTION);
						State = 162; expression(0);
						State = 163; Match(COLON);
						State = 164; expression(6);
						}
						break;
					}
					} 
				}
				State = 170;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FaplaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FaplaParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 16, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; expression(0);
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 172; Match(COMMA);
				State = 173; expression(0);
				}
				}
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode REAL() { return GetToken(FaplaParser.REAL, 0); }
		public ITerminalNode BOOL() { return GetToken(FaplaParser.BOOL, 0); }
		public ITerminalNode STRING() { return GetToken(FaplaParser.STRING, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << REAL) | (1L << BOOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(FaplaParser.Identifier, 0); }
		public ITerminalNode COLON() { return GetToken(FaplaParser.COLON, 0); }
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(FaplaParser.SEMI, 0); }
		public VarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.EnterVarDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.ExitVarDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclarationContext varDeclaration() {
		VarDeclarationContext _localctx = new VarDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_varDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 181; Match(Identifier);
			State = 182; Match(COLON);
			State = 183; primitiveType();
			State = 184; Match(SEMI);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(FaplaParser.Identifier, 0); }
		public ITerminalNode ASSIGN() { return GetToken(FaplaParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(FaplaParser.SEMI, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaplaListener typedListener = listener as IFaplaListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; Match(Identifier);
			State = 187; Match(ASSIGN);
			State = 188; expression(0);
			State = 189; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 9);
		case 5: return Precpred(Context, 8);
		case 6: return Precpred(Context, 7);
		case 7: return Precpred(Context, 6);
		case 8: return Precpred(Context, 5);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x30");
		sb.Append("\xC2\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x3\x2\a\x2\x1C\n\x2\f\x2\xE\x2\x1F\v\x2\x3\x2\x3\x2\a\x2");
		sb.Append("#\n\x2\f\x2\xE\x2&\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\x33\n\x3\f\x3\xE\x3\x36");
		sb.Append("\v\x3\x5\x3\x38\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3?\n");
		sb.Append("\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\a");
		sb.Append("\x5J\n\x5\f\x5\xE\x5M\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3");
		sb.Append("\a\x3\a\a\aV\n\a\f\a\xE\aY\v\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b");
		sb.Append("\x3\b\x3\b\x5\b\x63\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3");
		sb.Append("\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3");
		sb.Append("\b\x3\b\x3\b\x3\b\x5\b|\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3");
		sb.Append("\t\x3\t\x3\t\x3\t\x3\t\x5\t\x89\n\t\x3\t\x3\t\x3\t\x3\t\x3\t");
		sb.Append("\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t");
		sb.Append("\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t");
		sb.Append("\x3\t\a\t\xA9\n\t\f\t\xE\t\xAC\v\t\x3\n\x3\n\x3\n\a\n\xB1\n");
		sb.Append("\n\f\n\xE\n\xB4\v\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r");
		sb.Append("\x3\r\x3\r\x3\r\x3\r\x3\r\x2\x3\x10\xE\x2\x4\x6\b\n\f\xE\x10");
		sb.Append("\x12\x14\x16\x18\x2\a\x4\x2\'(**\x3\x2%&\x4\x2\x18\x19\x1E\x1F");
		sb.Append("\x4\x2\x1D\x1D  \x3\x2\x4\x6\xD3\x2\x1D\x3\x2\x2\x2\x4)\x3\x2");
		sb.Append("\x2\x2\x6\x42\x3\x2\x2\x2\b\x46\x3\x2\x2\x2\nN\x3\x2\x2\x2\f");
		sb.Append("S\x3\x2\x2\x2\xE{\x3\x2\x2\x2\x10\x88\x3\x2\x2\x2\x12\xAD\x3");
		sb.Append("\x2\x2\x2\x14\xB5\x3\x2\x2\x2\x16\xB7\x3\x2\x2\x2\x18\xBC\x3");
		sb.Append("\x2\x2\x2\x1A\x1C\x5\x4\x3\x2\x1B\x1A\x3\x2\x2\x2\x1C\x1F\x3");
		sb.Append("\x2\x2\x2\x1D\x1B\x3\x2\x2\x2\x1D\x1E\x3\x2\x2\x2\x1E \x3\x2");
		sb.Append("\x2\x2\x1F\x1D\x3\x2\x2\x2 $\x5\x6\x4\x2!#\x5\x4\x3\x2\"!\x3");
		sb.Append("\x2\x2\x2#&\x3\x2\x2\x2$\"\x3\x2\x2\x2$%\x3\x2\x2\x2%\'\x3\x2");
		sb.Append("\x2\x2&$\x3\x2\x2\x2\'(\a\x2\x2\x3(\x3\x3\x2\x2\x2)*\a\f\x2");
		sb.Append("\x2*\x37\a-\x2\x2+,\a\x10\x2\x2,\x34\a\x1C\x2\x2-.\a-\x2\x2");
		sb.Append("./\a\x1C\x2\x2/\x30\x5\x14\v\x2\x30\x31\a\x14\x2\x2\x31\x33");
		sb.Append("\x3\x2\x2\x2\x32-\x3\x2\x2\x2\x33\x36\x3\x2\x2\x2\x34\x32\x3");
		sb.Append("\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35\x38\x3\x2\x2\x2\x36\x34\x3");
		sb.Append("\x2\x2\x2\x37+\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38>\x3\x2\x2");
		sb.Append("\x2\x39:\a\x11\x2\x2:;\a\x1C\x2\x2;<\x5\x14\v\x2<=\a\x14\x2");
		sb.Append("\x2=?\x3\x2\x2\x2>\x39\x3\x2\x2\x2>?\x3\x2\x2\x2?@\x3\x2\x2");
		sb.Append("\x2@\x41\x5\f\a\x2\x41\x5\x3\x2\x2\x2\x42\x43\a\f\x2\x2\x43");
		sb.Append("\x44\a\xF\x2\x2\x44\x45\x5\f\a\x2\x45\a\x3\x2\x2\x2\x46G\a\x10");
		sb.Append("\x2\x2GK\a\x1C\x2\x2HJ\x5\x16\f\x2IH\x3\x2\x2\x2JM\x3\x2\x2");
		sb.Append("\x2KI\x3\x2\x2\x2KL\x3\x2\x2\x2L\t\x3\x2\x2\x2MK\x3\x2\x2\x2");
		sb.Append("NO\a\x11\x2\x2OP\a\x1C\x2\x2PQ\x5\x14\v\x2QR\a\x14\x2\x2R\v");
		sb.Append("\x3\x2\x2\x2SW\a\r\x2\x2TV\x5\xE\b\x2UT\x3\x2\x2\x2VY\x3\x2");
		sb.Append("\x2\x2WU\x3\x2\x2\x2WX\x3\x2\x2\x2XZ\x3\x2\x2\x2YW\x3\x2\x2");
		sb.Append("\x2Z[\a\xE\x2\x2[\r\x3\x2\x2\x2\\]\a\t\x2\x2]^\x5\x10\t\x2^");
		sb.Append("_\a\b\x2\x2_\x62\x5\f\a\x2`\x61\a\a\x2\x2\x61\x63\x5\f\a\x2");
		sb.Append("\x62`\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2\x63|\x3\x2\x2\x2\x64\x65");
		sb.Append("\a\v\x2\x2\x65\x66\x5\x10\t\x2\x66g\x5\xE\b\x2g|\x3\x2\x2\x2");
		sb.Append("h|\a\x14\x2\x2ij\x5\x10\t\x2jk\a\x14\x2\x2k|\x3\x2\x2\x2l|\x5");
		sb.Append("\x18\r\x2m|\x5\x16\f\x2no\a\x12\x2\x2op\a+\x2\x2pq\x5\x10\t");
		sb.Append("\x2qr\a,\x2\x2rs\a\x14\x2\x2s|\x3\x2\x2\x2tu\a\x13\x2\x2uv\a");
		sb.Append("-\x2\x2v|\a\x14\x2\x2wx\a\n\x2\x2xy\x5\x10\t\x2yz\a\x14\x2\x2");
		sb.Append("z|\x3\x2\x2\x2{\\\x3\x2\x2\x2{\x64\x3\x2\x2\x2{h\x3\x2\x2\x2");
		sb.Append("{i\x3\x2\x2\x2{l\x3\x2\x2\x2{m\x3\x2\x2\x2{n\x3\x2\x2\x2{t\x3");
		sb.Append("\x2\x2\x2{w\x3\x2\x2\x2|\xF\x3\x2\x2\x2}~\b\t\x1\x2~\x7F\a#");
		sb.Append("\x2\x2\x7F\x89\x5\x10\t\x10\x80\x81\a-\x2\x2\x81\x82\a+\x2\x2");
		sb.Append("\x82\x83\x5\x12\n\x2\x83\x84\a,\x2\x2\x84\x89\x3\x2\x2\x2\x85");
		sb.Append("\x89\a\x3\x2\x2\x86\x89\a-\x2\x2\x87\x89\x5\f\a\x2\x88}\x3\x2");
		sb.Append("\x2\x2\x88\x80\x3\x2\x2\x2\x88\x85\x3\x2\x2\x2\x88\x86\x3\x2");
		sb.Append("\x2\x2\x88\x87\x3\x2\x2\x2\x89\xAA\x3\x2\x2\x2\x8A\x8B\f\xF");
		sb.Append("\x2\x2\x8B\x8C\t\x2\x2\x2\x8C\xA9\x5\x10\t\x10\x8D\x8E\f\xE");
		sb.Append("\x2\x2\x8E\x8F\t\x3\x2\x2\x8F\xA9\x5\x10\t\xF\x90\x91\f\r\x2");
		sb.Append("\x2\x91\x92\t\x4\x2\x2\x92\xA9\x5\x10\t\xE\x93\x94\f\f\x2\x2");
		sb.Append("\x94\x95\t\x5\x2\x2\x95\xA9\x5\x10\t\r\x96\x97\f\v\x2\x2\x97");
		sb.Append("\x98\a!\x2\x2\x98\xA9\x5\x10\t\f\x99\x9A\f\n\x2\x2\x9A\x9B\a");
		sb.Append(")\x2\x2\x9B\xA9\x5\x10\t\v\x9C\x9D\f\t\x2\x2\x9D\x9E\a$\x2\x2");
		sb.Append("\x9E\xA9\x5\x10\t\n\x9F\xA0\f\b\x2\x2\xA0\xA1\a\"\x2\x2\xA1");
		sb.Append("\xA9\x5\x10\t\t\xA2\xA3\f\a\x2\x2\xA3\xA4\a\x1B\x2\x2\xA4\xA5");
		sb.Append("\x5\x10\t\x2\xA5\xA6\a\x1C\x2\x2\xA6\xA7\x5\x10\t\b\xA7\xA9");
		sb.Append("\x3\x2\x2\x2\xA8\x8A\x3\x2\x2\x2\xA8\x8D\x3\x2\x2\x2\xA8\x90");
		sb.Append("\x3\x2\x2\x2\xA8\x93\x3\x2\x2\x2\xA8\x96\x3\x2\x2\x2\xA8\x99");
		sb.Append("\x3\x2\x2\x2\xA8\x9C\x3\x2\x2\x2\xA8\x9F\x3\x2\x2\x2\xA8\xA2");
		sb.Append("\x3\x2\x2\x2\xA9\xAC\x3\x2\x2\x2\xAA\xA8\x3\x2\x2\x2\xAA\xAB");
		sb.Append("\x3\x2\x2\x2\xAB\x11\x3\x2\x2\x2\xAC\xAA\x3\x2\x2\x2\xAD\xB2");
		sb.Append("\x5\x10\t\x2\xAE\xAF\a\x15\x2\x2\xAF\xB1\x5\x10\t\x2\xB0\xAE");
		sb.Append("\x3\x2\x2\x2\xB1\xB4\x3\x2\x2\x2\xB2\xB0\x3\x2\x2\x2\xB2\xB3");
		sb.Append("\x3\x2\x2\x2\xB3\x13\x3\x2\x2\x2\xB4\xB2\x3\x2\x2\x2\xB5\xB6");
		sb.Append("\t\x6\x2\x2\xB6\x15\x3\x2\x2\x2\xB7\xB8\a-\x2\x2\xB8\xB9\a\x1C");
		sb.Append("\x2\x2\xB9\xBA\x5\x14\v\x2\xBA\xBB\a\x14\x2\x2\xBB\x17\x3\x2");
		sb.Append("\x2\x2\xBC\xBD\a-\x2\x2\xBD\xBE\a\x17\x2\x2\xBE\xBF\x5\x10\t");
		sb.Append("\x2\xBF\xC0\a\x14\x2\x2\xC0\x19\x3\x2\x2\x2\xF\x1D$\x34\x37");
		sb.Append(">KW\x62{\x88\xA8\xAA\xB2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
